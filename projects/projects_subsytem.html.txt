<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Somnus Projects - Autonomous Intelligence Workspaces</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        :root {
            /* Core Color System */
            --dark-900: #0a0a0f;
            --dark-800: #1a1a2e;
            --dark-700: #16213e;
            --dark-600: #0f3460;
            --light-100: #ffffff;
            --light-200: #f8fafc;
            --light-300: #e2e8f0;
            --light-400: #94a3b8;
            
            /* Accent System */
            --accent-cyan: #06b6d4;
            --accent-blue: #3b82f6;
            --accent-purple: #8b5cf6;
            --accent-green: #10b981;
            --accent-amber: #f59e0b;
            --accent-red: #ef4444;
            --accent-orange: #f97316;
            --accent-pink: #ec4899;
            
            /* Glass Morphism */
            --glass-bg: rgba(16, 23, 42, 0.8);
            --glass-border: rgba(148, 163, 184, 0.1);
            --glass-hover: rgba(148, 163, 184, 0.05);
            --blur-strength: blur(20px);
            
            /* Shadows */
            --shadow-glass: 0 8px 32px rgba(0, 0, 0, 0.12);
            --shadow-elevated: 0 12px 48px rgba(0, 0, 0, 0.15);
            --shadow-intense: 0 20px 64px rgba(0, 0, 0, 0.2);
            
            /* Transitions */
            --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-spring: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            --transition-bounce: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--dark-900) 0%, var(--dark-800) 50%, var(--dark-700) 100%);
            color: var(--light-100);
            overflow: hidden;
            height: 100vh;
        }

        /* Main Layout Architecture */
        .projects-container {
            display: grid;
            grid-template-areas: 
                "sidebar header intelligence-panel"
                "sidebar workspace intelligence-panel"
                "sidebar workspace monitoring-panel";
            grid-template-columns: 380px 1fr 420px;
            grid-template-rows: 80px 1fr 280px;
            height: 100vh;
            gap: 2px;
            background: var(--dark-900);
        }

        /* Enhanced Sidebar */
        .projects-sidebar {
            grid-area: sidebar;
            background: var(--glass-bg);
            backdrop-filter: var(--blur-strength);
            border-right: 1px solid var(--glass-border);
            padding: 24px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--accent-cyan) transparent;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 32px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--glass-border);
        }

        .sidebar-title {
            font-size: 20px;
            font-weight: 700;
            color: var(--accent-cyan);
        }

        .sidebar-subtitle {
            font-size: 12px;
            color: var(--light-400);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 2px;
        }

        .create-project-btn {
            background: var(--accent-cyan);
            border: none;
            border-radius: 12px;
            padding: 12px 16px;
            color: white;
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition-spring);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .create-project-btn:hover {
            background: #0891b2;
            transform: translateY(-2px) scale(1.05);
            box-shadow: var(--shadow-elevated);
        }

        /* Project Categories */
        .project-categories {
            margin-bottom: 24px;
        }

        .category-header {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            font-weight: 600;
            color: var(--light-300);
            margin-bottom: 12px;
            padding: 8px 0;
        }

        .category-filter {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 16px;
        }

        .filter-btn {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 8px;
            padding: 6px 12px;
            color: var(--light-300);
            font-size: 11px;
            cursor: pointer;
            transition: var(--transition-smooth);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-btn:hover,
        .filter-btn.active {
            background: var(--accent-cyan);
            border-color: var(--accent-cyan);
            color: white;
            transform: translateY(-1px);
        }

        /* Project Cards */
        .projects-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .project-card {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
            padding: 20px;
            cursor: pointer;
            transition: var(--transition-smooth);
            position: relative;
            overflow: hidden;
        }

        .project-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--accent-cyan), var(--accent-purple));
            opacity: 0;
            transition: var(--transition-smooth);
        }

        .project-card:hover {
            background: var(--dark-600);
            border-color: var(--accent-cyan);
            transform: translateY(-4px);
            box-shadow: var(--shadow-elevated);
        }

        .project-card:hover::before {
            opacity: 1;
        }

        .project-card.active {
            border-color: var(--accent-cyan);
            box-shadow: 0 0 0 2px rgba(6, 182, 212, 0.2);
        }

        .project-card.active::before {
            opacity: 1;
        }

        .project-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            margin-bottom: 12px;
        }

        .project-info {
            flex: 1;
        }

        .project-name {
            font-size: 16px;
            font-weight: 600;
            color: var(--light-100);
            margin-bottom: 4px;
        }

        .project-description {
            font-size: 13px;
            color: var(--light-400);
            line-height: 1.4;
            margin-bottom: 8px;
        }

        .project-type {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            background: var(--dark-800);
            border-radius: 6px;
            padding: 4px 8px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .project-type.research { color: var(--accent-cyan); }
        .project-type.development { color: var(--accent-green); }
        .project-type.analysis { color: var(--accent-purple); }
        .project-type.creative { color: var(--accent-pink); }

        .project-status {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .status-indicator.running { background: var(--accent-green); animation: pulse 2s infinite; }
        .status-indicator.suspended { background: var(--accent-amber); }
        .status-indicator.stopped { background: var(--light-400); }
        .status-indicator.error { background: var(--accent-red); }

        .project-metrics {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-top: 16px;
        }

        .metric-item {
            text-align: center;
        }

        .metric-value {
            font-size: 14px;
            font-weight: 600;
            color: var(--accent-cyan);
        }

        .metric-label {
            font-size: 10px;
            color: var(--light-400);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 2px;
        }

        .project-actions {
            display: flex;
            gap: 8px;
            margin-top: 16px;
            padding-top: 16px;
            border-top: 1px solid var(--glass-border);
        }

        .action-btn {
            flex: 1;
            background: var(--dark-800);
            border: 1px solid var(--glass-border);
            border-radius: 8px;
            padding: 8px 12px;
            color: var(--light-300);
            font-size: 11px;
            cursor: pointer;
            transition: var(--transition-smooth);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
        }

        .action-btn:hover {
            background: var(--dark-600);
            border-color: var(--accent-cyan);
            color: var(--light-100);
        }

        .action-btn.primary {
            background: var(--accent-cyan);
            border-color: var(--accent-cyan);
            color: white;
        }

        .action-btn.primary:hover {
            background: #0891b2;
        }

        /* Main Header */
        .projects-header {
            grid-area: header;
            background: var(--glass-bg);
            backdrop-filter: var(--blur-strength);
            border-bottom: 1px solid var(--glass-border);
            padding: 20px 32px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .header-title {
            font-size: 24px;
            font-weight: 700;
            color: var(--light-100);
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .search-container {
            position: relative;
        }

        .search-input {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 12px 16px 12px 40px;
            color: var(--light-100);
            font-size: 14px;
            width: 280px;
            transition: var(--transition-smooth);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--accent-cyan);
            box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--light-400);
        }

        .header-btn {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 12px 16px;
            color: var(--light-300);
            font-size: 14px;
            cursor: pointer;
            transition: var(--transition-smooth);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .header-btn:hover {
            background: var(--dark-600);
            border-color: var(--accent-cyan);
            color: var(--light-100);
        }

        /* Main Workspace */
        .projects-workspace {
            grid-area: workspace;
            background: var(--glass-bg);
            backdrop-filter: var(--blur-strength);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Workspace Tabs */
        .workspace-tabs {
            display: flex;
            border-bottom: 1px solid var(--glass-border);
            background: rgba(16, 23, 42, 0.6);
        }

        .workspace-tab {
            padding: 16px 24px;
            font-size: 14px;
            font-weight: 500;
            color: var(--light-400);
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: var(--transition-smooth);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .workspace-tab:hover {
            color: var(--light-100);
            background: var(--glass-hover);
        }

        .workspace-tab.active {
            color: var(--accent-cyan);
            border-bottom-color: var(--accent-cyan);
        }

        /* VM Dashboard */
        .vm-dashboard {
            padding: 24px;
            overflow-y: auto;
        }

        .vm-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .vm-card {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
            padding: 24px;
            transition: var(--transition-smooth);
            position: relative;
            overflow: hidden;
        }

        .vm-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--accent-green), var(--accent-cyan));
            opacity: 0;
            transition: var(--transition-smooth);
        }

        .vm-card:hover {
            background: var(--dark-600);
            transform: translateY(-2px);
            box-shadow: var(--shadow-elevated);
        }

        .vm-card:hover::before {
            opacity: 1;
        }

        .vm-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
        }

        .vm-name {
            font-size: 16px;
            font-weight: 600;
            color: var(--light-100);
        }

        .vm-status {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 12px;
            font-weight: 500;
            padding: 4px 8px;
            border-radius: 6px;
        }

        .vm-status.running {
            background: rgba(16, 185, 129, 0.2);
            color: var(--accent-green);
        }

        .vm-status.suspended {
            background: rgba(245, 158, 11, 0.2);
            color: var(--accent-amber);
        }

        .vm-metrics-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 16px;
            margin-bottom: 20px;
        }

        .vm-metric {
            text-align: center;
        }

        .vm-metric-value {
            font-size: 18px;
            font-weight: 700;
            color: var(--accent-cyan);
            margin-bottom: 4px;
        }

        .vm-metric-label {
            font-size: 11px;
            color: var(--light-400);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .vm-actions {
            display: flex;
            gap: 8px;
        }

        .vm-action {
            flex: 1;
            background: var(--dark-800);
            border: 1px solid var(--glass-border);
            border-radius: 8px;
            padding: 8px 12px;
            color: var(--light-300);
            font-size: 11px;
            cursor: pointer;
            transition: var(--transition-smooth);
            text-align: center;
        }

        .vm-action:hover {
            background: var(--dark-600);
            border-color: var(--accent-cyan);
            color: var(--light-100);
        }

        /* Intelligence Panel */
        .intelligence-panel {
            grid-area: intelligence-panel;
            background: var(--glass-bg);
            backdrop-filter: var(--blur-strength);
            border-left: 1px solid var(--glass-border);
            padding: 24px;
            overflow-y: auto;
        }

        .panel-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
            padding-bottom: 12px;
            border-bottom: 1px solid var(--glass-border);
        }

        .panel-title {
            font-size: 16px;
            font-weight: 600;
            color: var(--light-100);
        }

        .intelligence-insights {
            margin-bottom: 24px;
        }

        .insight-card {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-left: 4px solid var(--accent-purple);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            transition: var(--transition-smooth);
        }

        .insight-card:hover {
            background: var(--dark-600);
            transform: translateX(4px);
        }

        .insight-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
        }

        .insight-type {
            color: var(--accent-purple);
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .insight-confidence {
            background: var(--accent-purple);
            color: white;
            font-size: 10px;
            font-weight: 600;
            padding: 2px 6px;
            border-radius: 4px;
        }

        .insight-text {
            font-size: 13px;
            color: var(--light-300);
            line-height: 1.4;
        }

        /* Collaboration Panel */
        .collaboration-section {
            margin-bottom: 24px;
        }

        .collaborator-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .collaborator-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 12px;
            background: var(--dark-700);
            border-radius: 8px;
            transition: var(--transition-smooth);
        }

        .collaborator-item:hover {
            background: var(--dark-600);
        }

        .collaborator-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--accent-cyan);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 12px;
        }

        .collaborator-info {
            flex: 1;
        }

        .collaborator-name {
            font-size: 13px;
            font-weight: 500;
            color: var(--light-100);
        }

        .collaborator-role {
            font-size: 11px;
            color: var(--light-400);
        }

        .collaborator-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--accent-green);
        }

        /* Monitoring Panel */
        .monitoring-panel {
            grid-area: monitoring-panel;
            background: var(--glass-bg);
            backdrop-filter: var(--blur-strength);
            border-left: 1px solid var(--glass-border);
            border-top: 1px solid var(--glass-border);
            padding: 20px;
            overflow-y: auto;
        }

        .monitoring-charts {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin-bottom: 20px;
        }

        .chart-container {
            background: var(--dark-700);
            border-radius: 12px;
            padding: 16px;
            height: 200px;
        }

        .chart-title {
            font-size: 12px;
            font-weight: 600;
            color: var(--light-300);
            margin-bottom: 12px;
            text-align: center;
        }

        /* Activity Feed */
        .activity-feed {
            max-height: 200px;
            overflow-y: auto;
        }

        .activity-item {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            padding: 8px 0;
            border-bottom: 1px solid var(--glass-border);
        }

        .activity-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            color: white;
            margin-top: 2px;
        }

        .activity-icon.vm { background: var(--accent-green); }
        .activity-icon.collaboration { background: var(--accent-cyan); }
        .activity-icon.intelligence { background: var(--accent-purple); }
        .activity-icon.artifact { background: var(--accent-orange); }

        .activity-content {
            flex: 1;
        }

        .activity-text {
            font-size: 12px;
            color: var(--light-300);
            line-height: 1.4;
            margin-bottom: 2px;
        }

        .activity-time {
            font-size: 10px;
            color: var(--light-400);
        }

        /* Responsive Design */
        @media (max-width: 1400px) {
            .projects-container {
                grid-template-columns: 320px 1fr 360px;
            }
        }

        @media (max-width: 1200px) {
            .projects-container {
                grid-template-areas: 
                    "header header"
                    "sidebar workspace"
                    "intelligence-panel monitoring-panel";
                grid-template-columns: 300px 1fr;
                grid-template-rows: 80px 1fr 300px;
            }
        }

        @media (max-width: 768px) {
            .projects-container {
                grid-template-areas: 
                    "header"
                    "workspace"
                    "sidebar";
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr auto;
            }
            
            .projects-sidebar,
            .intelligence-panel,
            .monitoring-panel {
                position: relative;
                height: auto;
            }
        }

        /* Animations */
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: slideIn 0.5s ease-out;
        }

        /* Custom Scrollbars */
        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--accent-cyan);
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #0891b2;
        }

        /* Loading States */
        .loading-shimmer {
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }

        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition-smooth);
        }

        .modal-overlay.active {
            opacity: 1;
            pointer-events: all;
        }

        .modal-content {
            background: var(--dark-800);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            padding: 32px;
            max-width: 600px;
            width: 90vw;
            max-height: 80vh;
            overflow-y: auto;
            transform: scale(0.9);
            transition: var(--transition-spring);
        }

        .modal-overlay.active .modal-content {
            transform: scale(1);
        }

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 700;
            color: var(--light-100);
        }

        .modal-close {
            background: none;
            border: none;
            color: var(--light-400);
            font-size: 24px;
            cursor: pointer;
            transition: var(--transition-smooth);
        }

        .modal-close:hover {
            color: var(--light-100);
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 12px;
            font-weight: 600;
            color: var(--light-300);
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .form-input {
            width: 100%;
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 14px 16px;
            color: var(--light-100);
            font-size: 14px;
            transition: var(--transition-smooth);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent-cyan);
            box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }

        .form-select {
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%2394a3b8' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 16px;
            padding-right: 40px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .form-actions {
            display: flex;
            gap: 12px;
            margin-top: 24px;
            padding-top: 24px;
            border-top: 1px solid var(--glass-border);
        }

        .btn {
            background: var(--dark-700);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 12px 24px;
            color: var(--light-300);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition-smooth);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn:hover {
            background: var(--dark-600);
            border-color: var(--accent-cyan);
            color: var(--light-100);
        }

        .btn-primary {
            background: var(--accent-cyan);
            border-color: var(--accent-cyan);
            color: white;
        }

        .btn-primary:hover {
            background: #0891b2;
        }

        .btn-secondary {
            background: transparent;
            border-color: var(--glass-border);
            color: var(--light-400);
        }

        .btn-danger {
            background: var(--accent-red);
            border-color: var(--accent-red);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }
    </style>
</head>
<body>
    <div class="projects-container">
        <!-- Enhanced Projects Sidebar -->
        <div class="projects-sidebar">
            <div class="sidebar-header">
                <div>
                    <div class="sidebar-title">Project Workspaces</div>
                    <div class="sidebar-subtitle">Autonomous Intelligence</div>
                </div>
                <button class="create-project-btn" id="create-project">
                    <i class="fas fa-plus"></i>
                    Create
                </button>
            </div>

            <!-- Project Categories -->
            <div class="project-categories">
                <div class="category-header">
                    <i class="fas fa-filter"></i>
                    Filter by Type
                </div>
                <div class="category-filter">
                    <button class="filter-btn active" data-type="all">All</button>
                    <button class="filter-btn" data-type="research">Research</button>
                    <button class="filter-btn" data-type="development">Development</button>
                    <button class="filter-btn" data-type="analysis">Analysis</button>
                    <button class="filter-btn" data-type="creative">Creative</button>
                </div>
            </div>

            <!-- Projects List -->
            <div class="projects-list" id="projects-list">
                <!-- Projects will be populated here -->
            </div>
        </div>

        <!-- Projects Header -->
        <div class="projects-header">
            <div class="header-title" id="header-title">Quantum Research Project</div>
            <div class="header-controls">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Search projects..." id="project-search">
                    <i class="fas fa-search search-icon"></i>
                </div>
                <button class="header-btn" id="sync-projects">
                    <i class="fas fa-sync"></i>
                    Sync
                </button>
                <button class="header-btn" id="project-settings">
                    <i class="fas fa-cog"></i>
                    Settings
                </button>
            </div>
        </div>

        <!-- Projects Workspace -->
        <div class="projects-workspace">
            <!-- Workspace Tabs -->
            <div class="workspace-tabs">
                <div class="workspace-tab active" data-tab="vm-dashboard">
                    <i class="fas fa-server"></i>
                    VM Dashboard
                </div>
                <div class="workspace-tab" data-tab="collaboration">
                    <i class="fas fa-users"></i>
                    Collaboration
                </div>
                <div class="workspace-tab" data-tab="artifacts">
                    <i class="fas fa-code"></i>
                    Artifacts
                </div>
                <div class="workspace-tab" data-tab="knowledge">
                    <i class="fas fa-brain"></i>
                    Knowledge
                </div>
                <div class="workspace-tab" data-tab="automation">
                    <i class="fas fa-robot"></i>
                    Automation
                </div>
            </div>

            <!-- VM Dashboard Tab -->
            <div class="workspace-content active" id="vm-dashboard">
                <div class="vm-dashboard">
                    <div class="vm-overview" id="vm-overview">
                        <!-- VM cards will be populated here -->
                    </div>
                </div>
            </div>

            <!-- Collaboration Tab -->
            <div class="workspace-content" id="collaboration">
                <div class="vm-dashboard">
                    <div class="collaboration-overview">
                        <h3 style="margin-bottom: 20px; color: var(--light-100);">Active Collaboration Sessions</h3>
                        <div id="collaboration-sessions">
                            <!-- Collaboration content will be populated here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Artifacts Tab -->
            <div class="workspace-content" id="artifacts">
                <div class="vm-dashboard">
                    <div class="artifacts-overview">
                        <h3 style="margin-bottom: 20px; color: var(--light-100);">Project Artifacts</h3>
                        <div id="artifacts-grid">
                            <!-- Artifacts content will be populated here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Knowledge Tab -->
            <div class="workspace-content" id="knowledge">
                <div class="vm-dashboard">
                    <div class="knowledge-overview">
                        <h3 style="margin-bottom: 20px; color: var(--light-100);">Knowledge Base</h3>
                        <div id="knowledge-content">
                            <!-- Knowledge content will be populated here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Automation Tab -->
            <div class="workspace-content" id="automation">
                <div class="vm-dashboard">
                    <div class="automation-overview">
                        <h3 style="margin-bottom: 20px; color: var(--light-100);">Automation Workflows</h3>
                        <div id="automation-workflows">
                            <!-- Automation content will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Intelligence Panel -->
        <div class="intelligence-panel">
            <div class="panel-header">
                <div class="panel-title">AI Intelligence</div>
                <button class="header-btn" style="padding: 8px;">
                    <i class="fas fa-brain"></i>
                </button>
            </div>
            
            <div class="intelligence-insights">
                <div class="category-header">
                    <i class="fas fa-lightbulb"></i>
                    Insights & Recommendations
                </div>
                <div id="intelligence-insights">
                    <!-- Insights will be populated here -->
                </div>
            </div>

            <div class="collaboration-section">
                <div class="category-header">
                    <i class="fas fa-users"></i>
                    Active Collaborators
                </div>
                <div class="collaborator-list" id="collaborator-list">
                    <!-- Collaborators will be populated here -->
                </div>
            </div>

            <div class="intelligence-actions" style="margin-top: 24px;">
                <button class="btn btn-primary" style="width: 100%; margin-bottom: 8px;" id="ai-analyze">
                    <i class="fas fa-search"></i>
                    Analyze Project
                </button>
                <button class="btn" style="width: 100%; margin-bottom: 8px;" id="ai-optimize">
                    <i class="fas fa-rocket"></i>
                    Optimize Workflow
                </button>
                <button class="btn" style="width: 100%;" id="ai-suggest">
                    <i class="fas fa-magic"></i>
                    Generate Suggestions
                </button>
            </div>
        </div>

        <!-- Monitoring Panel -->
        <div class="monitoring-panel">
            <div class="panel-header">
                <div class="panel-title">System Monitoring</div>
                <button class="header-btn" style="padding: 8px;">
                    <i class="fas fa-chart-line"></i>
                </button>
            </div>
            
            <div class="monitoring-charts">
                <div class="chart-container">
                    <div class="chart-title">Resource Usage</div>
                    <canvas id="resource-chart" width="150" height="100"></canvas>
                </div>
                <div class="chart-container">
                    <div class="chart-title">Project Activity</div>
                    <canvas id="activity-chart" width="150" height="100"></canvas>
                </div>
            </div>

            <div class="activity-feed">
                <div class="category-header" style="margin-bottom: 12px;">
                    <i class="fas fa-stream"></i>
                    Recent Activity
                </div>
                <div id="activity-feed">
                    <!-- Activity items will be populated here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Create Project Modal -->
    <div class="modal-overlay" id="create-project-modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Create New Project</div>
                <button class="modal-close" id="close-modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="create-project-form">
                <div class="form-group">
                    <label class="form-label">Project Name</label>
                    <input type="text" class="form-input" id="project-name" placeholder="Enter project name..." required>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea class="form-input form-textarea" id="project-description" placeholder="Describe your project..."></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Project Type</label>
                        <select class="form-input form-select" id="project-type">
                            <option value="research">Research</option>
                            <option value="development">Development</option>
                            <option value="analysis">Analysis</option>
                            <option value="creative">Creative</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">VM Configuration</label>
                        <select class="form-input form-select" id="vm-config">
                            <option value="standard">Standard (4GB RAM, 2 CPU)</option>
                            <option value="enhanced">Enhanced (8GB RAM, 4 CPU)</option>
                            <option value="powerful">Powerful (16GB RAM, 8 CPU)</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">
                            <input type="checkbox" id="enable-collaboration" style="margin-right: 8px;">
                            Enable Collaboration
                        </label>
                    </div>
                    <div class="form-group">
                        <label class="form-label">
                            <input type="checkbox" id="enable-automation" style="margin-right: 8px;">
                            Enable Automation
                        </label>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="cancel-create">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus"></i>
                        Create Project
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Revolutionary Projects Management System
        class RevolutionaryProjectsManager {
            constructor() {
                this.websocket = null;
                this.isConnected = false;
                this.projects = new Map();
                this.selectedProject = null;
                this.currentTab = 'vm-dashboard';
                this.monitoringCharts = {
                    resource: null,
                    activity: null
                };
                
                this.init();
            }

            init() {
                this.connectWebSocket();
                this.initializeEventListeners();
                this.initializeCharts();
                this.loadProjects();
                this.startMonitoring();
                this.populateSampleData();
            }

            connectWebSocket() {
                try {
                    this.websocket = new WebSocket('ws://localhost:25805/projects/ws');
                    
                    this.websocket.onopen = () => {
                        this.isConnected = true;
                        this.logActivity('WebSocket connected to projects system', 'success');
                    };

                    this.websocket.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        this.handleWebSocketMessage(data);
                    };

                    this.websocket.onclose = () => {
                        this.isConnected = false;
                        this.logActivity('WebSocket disconnected', 'warning');
                        setTimeout(() => this.connectWebSocket(), 5000);
                    };

                    this.websocket.onerror = (error) => {
                        this.logActivity('WebSocket error: ' + error.message, 'error');
                    };
                } catch (error) {
                    this.logActivity('Failed to connect WebSocket: ' + error.message, 'error');
                }
            }

            sendMessage(data) {
                if (this.isConnected && this.websocket.readyState === WebSocket.OPEN) {
                    this.websocket.send(JSON.stringify(data));
                } else {
                    this.logActivity('Cannot send message: WebSocket not connected', 'warning');
                }
            }

            handleWebSocketMessage(data) {
                switch (data.type) {
                    case 'project_created':
                        this.addProject(data.project);
                        break;
                    case 'project_updated':
                        this.updateProject(data.project);
                        break;
                    case 'vm_status_update':
                        this.updateVMStatus(data.projectId, data.vmStatus);
                        break;
                    case 'collaboration_update':
                        this.updateCollaboration(data.projectId, data.collaboration);
                        break;
                    case 'intelligence_insight':
                        this.addIntelligenceInsight(data.insight);
                        break;
                    case 'activity_update':
                        this.addActivity(data.activity);
                        break;
                    default:
                        console.log('Unknown message type:', data.type);
                }
            }

            initializeEventListeners() {
                // Create project button
                document.getElementById('create-project').addEventListener('click', () => {
                    this.showCreateProjectModal();
                });

                // Modal controls
                document.getElementById('close-modal').addEventListener('click', () => {
                    this.hideCreateProjectModal();
                });

                document.getElementById('cancel-create').addEventListener('click', () => {
                    this.hideCreateProjectModal();
                });

                // Create project form
                document.getElementById('create-project-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.createProject();
                });

                // Tab switching
                document.querySelectorAll('.workspace-tab').forEach(tab => {
                    tab.addEventListener('click', () => {
                        this.switchTab(tab.dataset.tab);
                    });
                });

                // Filter buttons
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                        btn.classList.add('active');
                        this.filterProjects(btn.dataset.type);
                    });
                });

                // Search functionality
                document.getElementById('project-search').addEventListener('input', (e) => {
                    this.searchProjects(e.target.value);
                });

                // Header controls
                document.getElementById('sync-projects').addEventListener('click', () => {
                    this.syncProjects();
                });

                document.getElementById('project-settings').addEventListener('click', () => {
                    this.showProjectSettings();
                });

                // Intelligence actions
                document.getElementById('ai-analyze').addEventListener('click', () => {
                    this.analyzeProject();
                });

                document.getElementById('ai-optimize').addEventListener('click', () => {
                    this.optimizeWorkflow();
                });

                document.getElementById('ai-suggest').addEventListener('click', () => {
                    this.generateSuggestions();
                });

                // Click outside modal to close
                document.getElementById('create-project-modal').addEventListener('click', (e) => {
                    if (e.target.id === 'create-project-modal') {
                        this.hideCreateProjectModal();
                    }
                });
            }

            initializeCharts() {
                try {
                    // Check if Chart.js is loaded
                    if (typeof Chart === 'undefined') {
                        console.error('Chart.js is not loaded');
                        this.logActivity('Chart.js library not loaded', 'error');
                        return;
                    }

                    // Wait for DOM elements to be available
                    const resourceCanvas = document.getElementById('resource-chart');
                    const activityCanvas = document.getElementById('activity-chart');
                    
                    if (!resourceCanvas || !activityCanvas) {
                        console.error('Chart canvas elements not found');
                        setTimeout(() => this.initializeCharts(), 1000);
                        return;
                    }

                    // Resource usage chart
                    const resourceCtx = resourceCanvas.getContext('2d');
                    this.monitoringCharts.resource = new Chart(resourceCtx, {
                        type: 'doughnut',
                        data: {
                            labels: ['CPU', 'Memory', 'Storage'],
                            datasets: [{
                                data: [65, 45, 30],
                                backgroundColor: ['#06b6d4', '#8b5cf6', '#10b981'],
                                borderColor: '#1a1a2e',
                                borderWidth: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });

                    // Activity chart
                    const activityCtx = activityCanvas.getContext('2d');
                    this.monitoringCharts.activity = new Chart(activityCtx, {
                        type: 'line',
                        data: {
                            labels: ['1h', '2h', '3h', '4h', '5h', '6h'],
                            datasets: [{
                                label: 'Activity',
                                data: [12, 19, 15, 25, 22, 18],
                                borderColor: '#06b6d4',
                                backgroundColor: 'rgba(6, 182, 212, 0.1)',
                                tension: 0.4,
                                fill: true
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: {
                                    display: false
                                },
                                y: {
                                    display: false
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });

                    this.logActivity('Monitoring charts initialized successfully', 'success');
                } catch (error) {
                    console.error('Error initializing charts:', error);
                    this.logActivity(`Chart initialization failed: ${error.message}`, 'error');
                }
            }

            loadProjects() {
                // Load projects from backend or localStorage
                this.sendMessage({
                    type: 'list_projects',
                    user_id: 'current_user'
                });
            }

            populateSampleData() {
                const sampleProjects = [
                    {
                        id: 'quantum-research',
                        name: 'Quantum Research Project',
                        description: 'Advanced quantum computing research with cryptographic implications',
                        type: 'research',
                        status: 'running',
                        vmStatus: {
                            cpu: 23,
                            memory: 68,
                            storage: 45,
                            uptime: '2d 14h'
                        },
                        metrics: {
                            artifacts: 12,
                            collaborators: 3,
                            commits: 47
                        },
                        lastActivity: '2 minutes ago'
                    },
                    {
                        id: 'ai-development',
                        name: 'AI Development Suite',
                        description: 'Revolutionary AI system development with multi-agent capabilities',
                        type: 'development',
                        status: 'running',
                        vmStatus: {
                            cpu: 45,
                            memory: 72,
                            storage: 62,
                            uptime: '5d 8h'
                        },
                        metrics: {
                            artifacts: 28,
                            collaborators: 5,
                            commits: 156
                        },
                        lastActivity: '8 minutes ago'
                    },
                    {
                        id: 'data-analysis',
                        name: 'Data Analysis Lab',
                        description: 'Large-scale data processing and machine learning research',
                        type: 'analysis',
                        status: 'suspended',
                        vmStatus: {
                            cpu: 0,
                            memory: 0,
                            storage: 38,
                            uptime: 'Suspended'
                        },
                        metrics: {
                            artifacts: 15,
                            collaborators: 2,
                            commits: 89
                        },
                        lastActivity: '1 hour ago'
                    },
                    {
                        id: 'creative-lab',
                        name: 'Creative Lab',
                        description: 'AI-powered creative content generation and multimedia projects',
                        type: 'creative',
                        status: 'running',
                        vmStatus: {
                            cpu: 34,
                            memory: 55,
                            storage: 71,
                            uptime: '1d 12h'
                        },
                        metrics: {
                            artifacts: 9,
                            collaborators: 4,
                            commits: 32
                        },
                        lastActivity: '15 minutes ago'
                    }
                ];

                sampleProjects.forEach(project => {
                    this.projects.set(project.id, project);
                });

                this.renderProjects();
                this.selectProject('quantum-research');
                this.populateIntelligenceInsights();
                this.populateCollaborators();
                this.populateActivityFeed();
            }

            renderProjects() {
                const container = document.getElementById('projects-list');
                const projectsArray = Array.from(this.projects.values());
                
                container.innerHTML = projectsArray.map(project => this.createProjectCard(project)).join('');

                // Add click listeners to project cards
                container.querySelectorAll('.project-card').forEach(card => {
                    card.addEventListener('click', () => {
                        this.selectProject(card.dataset.projectId);
                    });
                });
            }

            createProjectCard(project) {
                const statusColor = {
                    running: 'var(--accent-green)',
                    suspended: 'var(--accent-amber)',
                    stopped: 'var(--light-400)',
                    error: 'var(--accent-red)'
                }[project.status];

                return `
                    <div class="project-card fade-in ${this.selectedProject === project.id ? 'active' : ''}" 
                         data-project-id="${project.id}" data-type="${project.type}">
                        <div class="project-header">
                            <div class="project-info">
                                <div class="project-name">${project.name}</div>
                                <div class="project-description">${project.description}</div>
                                <div class="project-type ${project.type}">
                                    <i class="fas fa-${this.getTypeIcon(project.type)}"></i>
                                    ${project.type}
                                </div>
                            </div>
                            <div class="project-status">
                                <div class="status-indicator ${project.status}"></div>
                                ${project.status}
                            </div>
                        </div>
                        <div class="project-metrics">
                            <div class="metric-item">
                                <div class="metric-value">${project.metrics.artifacts}</div>
                                <div class="metric-label">Artifacts</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-value">${project.metrics.collaborators}</div>
                                <div class="metric-label">Collaborators</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-value">${project.metrics.commits}</div>
                                <div class="metric-label">Commits</div>
                            </div>
                        </div>
                        <div class="project-actions">
                            <button class="action-btn primary" onclick="event.stopPropagation(); projectsManager.openProject('${project.id}')">
                                <i class="fas fa-play"></i>
                                Open
                            </button>
                            <button class="action-btn" onclick="event.stopPropagation(); projectsManager.manageVM('${project.id}')">
                                <i class="fas fa-server"></i>
                                VM
                            </button>
                            <button class="action-btn" onclick="event.stopPropagation(); projectsManager.shareProject('${project.id}')">
                                <i class="fas fa-share"></i>
                                Share
                            </button>
                        </div>
                    </div>
                `;
            }

            getTypeIcon(type) {
                const icons = {
                    research: 'microscope',
                    development: 'code',
                    analysis: 'chart-bar',
                    creative: 'palette'
                };
                return icons[type] || 'folder';
            }

            selectProject(projectId) {
                this.selectedProject = projectId;
                const project = this.projects.get(projectId);
                
                if (!project) return;

                // Update header title
                document.getElementById('header-title').textContent = project.name;

                // Update active project card
                document.querySelectorAll('.project-card').forEach(card => {
                    card.classList.remove('active');
                });
                document.querySelector(`[data-project-id="${projectId}"]`)?.classList.add('active');

                // Update workspace content
                this.updateWorkspaceContent(project);
                
                this.logActivity(`Selected project: ${project.name}`, 'info');
            }

            updateWorkspaceContent(project) {
                this.renderVMDashboard(project);
                this.renderCollaboration(project);
                this.renderArtifacts(project);
                this.renderKnowledge(project);
                this.renderAutomation(project);
            }

            renderVMDashboard(project) {
                const container = document.getElementById('vm-overview');
                container.innerHTML = `
                    <div class="vm-card">
                        <div class="vm-header">
                            <div class="vm-name">${project.name} VM</div>
                            <div class="vm-status ${project.status}">
                                <div class="status-indicator ${project.status}"></div>
                                ${project.status.charAt(0).toUpperCase() + project.status.slice(1)}
                            </div>
                        </div>
                        <div class="vm-metrics-grid">
                            <div class="vm-metric">
                                <div class="vm-metric-value">${project.vmStatus.cpu}%</div>
                                <div class="vm-metric-label">CPU Usage</div>
                            </div>
                            <div class="vm-metric">
                                <div class="vm-metric-value">${project.vmStatus.memory}%</div>
                                <div class="vm-metric-label">Memory</div>
                            </div>
                            <div class="vm-metric">
                                <div class="vm-metric-value">${project.vmStatus.storage}%</div>
                                <div class="vm-metric-label">Storage</div>
                            </div>
                            <div class="vm-metric">
                                <div class="vm-metric-value">${project.vmStatus.uptime}</div>
                                <div class="vm-metric-label">Uptime</div>
                            </div>
                        </div>
                        <div class="vm-actions">
                            <button class="vm-action" onclick="projectsManager.connectToVM('${project.id}')">
                                <i class="fas fa-terminal"></i>
                                Connect
                            </button>
                            <button class="vm-action" onclick="projectsManager.suspendVM('${project.id}')">
                                <i class="fas fa-pause"></i>
                                Suspend
                            </button>
                            <button class="vm-action" onclick="projectsManager.restartVM('${project.id}')">
                                <i class="fas fa-redo"></i>
                                Restart
                            </button>
                        </div>
                    </div>
                    <div class="vm-card">
                        <div class="vm-header">
                            <div class="vm-name">Environment Configuration</div>
                        </div>
                        <div style="padding: 16px 0;">
                            <div style="margin-bottom: 12px;">
                                <strong style="color: var(--light-100);">OS:</strong> 
                                <span style="color: var(--light-400);">Ubuntu 22.04 LTS</span>
                            </div>
                            <div style="margin-bottom: 12px;">
                                <strong style="color: var(--light-100);">Python:</strong> 
                                <span style="color: var(--light-400);">3.11.5</span>
                            </div>
                            <div style="margin-bottom: 12px;">
                                <strong style="color: var(--light-100);">Node.js:</strong> 
                                <span style="color: var(--light-400);">18.17.0</span>
                            </div>
                            <div style="margin-bottom: 12px;">
                                <strong style="color: var(--light-100);">Docker:</strong> 
                                <span style="color: var(--light-400);">24.0.2</span>
                            </div>
                        </div>
                        <div class="vm-actions">
                            <button class="vm-action" onclick="projectsManager.updateEnvironment('${project.id}')">
                                <i class="fas fa-download"></i>
                                Update
                            </button>
                            <button class="vm-action" onclick="projectsManager.configureEnvironment('${project.id}')">
                                <i class="fas fa-cog"></i>
                                Configure
                            </button>
                        </div>
                    </div>
                `;
            }

            renderCollaboration(project) {
                const container = document.getElementById('collaboration-sessions');
                container.innerHTML = `
                    <div class="vm-overview">
                        <div class="vm-card">
                            <div class="vm-header">
                                <div class="vm-name">Active Sessions</div>
                                <div class="vm-status running">
                                    <div class="status-indicator running"></div>
                                    ${project.metrics.collaborators} Active
                                </div>
                            </div>
                            <div style="padding: 16px 0;">
                                <div class="collaborator-item" style="margin-bottom: 8px;">
                                    <div class="collaborator-avatar">AI</div>
                                    <div class="collaborator-info">
                                        <div class="collaborator-name">Research Assistant</div>
                                        <div class="collaborator-role">Autonomous Agent</div>
                                    </div>
                                    <div class="collaborator-status"></div>
                                </div>
                                <div class="collaborator-item" style="margin-bottom: 8px;">
                                    <div class="collaborator-avatar">DR</div>
                                    <div class="collaborator-info">
                                        <div class="collaborator-name">Dr. Sarah Chen</div>
                                        <div class="collaborator-role">Lead Researcher</div>
                                    </div>
                                    <div class="collaborator-status"></div>
                                </div>
                                <div class="collaborator-item">
                                    <div class="collaborator-avatar">MK</div>
                                    <div class="collaborator-info">
                                        <div class="collaborator-name">Mike Kumar</div>
                                        <div class="collaborator-role">Data Scientist</div>
                                    </div>
                                    <div class="collaborator-status"></div>
                                </div>
                            </div>
                            <div class="vm-actions">
                                <button class="vm-action" onclick="projectsManager.startCollaboration('${project.id}')">
                                    <i class="fas fa-users"></i>
                                    Invite
                                </button>
                                <button class="vm-action" onclick="projectsManager.shareScreen('${project.id}')">
                                    <i class="fas fa-desktop"></i>
                                    Share
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }

            renderArtifacts(project) {
                const container = document.getElementById('artifacts-grid');
                container.innerHTML = `
                    <div class="vm-overview">
                        <div class="vm-card">
                            <div class="vm-header">
                                <div class="vm-name">Recent Artifacts</div>
                                <div class="vm-status running">
                                    <span>${project.metrics.artifacts} Total</span>
                                </div>
                            </div>
                            <div style="padding: 16px 0;">
                                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
                                    <div style="padding: 12px; background: var(--dark-800); border-radius: 8px; text-align: center;">
                                        <i class="fas fa-code" style="font-size: 24px; color: var(--accent-cyan); margin-bottom: 8px;"></i>
                                        <div style="font-size: 12px; color: var(--light-300);">Python Scripts</div>
                                        <div style="font-size: 16px; font-weight: 600; color: var(--light-100);">8</div>
                                    </div>
                                    <div style="padding: 12px; background: var(--dark-800); border-radius: 8px; text-align: center;">
                                        <i class="fas fa-chart-bar" style="font-size: 24px; color: var(--accent-green); margin-bottom: 8px;"></i>
                                        <div style="font-size: 12px; color: var(--light-300);">Visualizations</div>
                                        <div style="font-size: 16px; font-weight: 600; color: var(--light-100);">4</div>
                                    </div>
                                </div>
                            </div>
                            <div class="vm-actions">
                                <button class="vm-action" onclick="projectsManager.createArtifact('${project.id}')">
                                    <i class="fas fa-plus"></i>
                                    Create
                                </button>
                                <button class="vm-action" onclick="projectsManager.viewArtifacts('${project.id}')">
                                    <i class="fas fa-eye"></i>
                                    View All
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }

            renderKnowledge(project) {
                const container = document.getElementById('knowledge-content');
                container.innerHTML = `
                    <div class="vm-overview">
                        <div class="vm-card">
                            <div class="vm-header">
                                <div class="vm-name">Knowledge Base</div>
                            </div>
                            <div style="padding: 16px 0;">
                                <div style="margin-bottom: 16px;">
                                    <strong style="color: var(--light-100);">Documents:</strong> 
                                    <span style="color: var(--accent-cyan);">247 indexed</span>
                                </div>
                                <div style="margin-bottom: 16px;">
                                    <strong style="color: var(--light-100);">Key Concepts:</strong> 
                                    <span style="color: var(--accent-cyan);">89 extracted</span>
                                </div>
                                <div style="margin-bottom: 16px;">
                                    <strong style="color: var(--light-100);">Connections:</strong> 
                                    <span style="color: var(--accent-cyan);">156 relationships</span>
                                </div>
                            </div>
                            <div class="vm-actions">
                                <button class="vm-action" onclick="projectsManager.searchKnowledge('${project.id}')">
                                    <i class="fas fa-search"></i>
                                    Search
                                </button>
                                <button class="vm-action" onclick="projectsManager.addKnowledge('${project.id}')">
                                    <i class="fas fa-plus"></i>
                                    Add
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }

            renderAutomation(project) {
                const container = document.getElementById('automation-workflows');
                container.innerHTML = `
                    <div class="vm-overview">
                        <div class="vm-card">
                            <div class="vm-header">
                                <div class="vm-name">Active Workflows</div>
                                <div class="vm-status running">
                                    <div class="status-indicator running"></div>
                                    3 Running
                                </div>
                            </div>
                            <div style="padding: 16px 0;">
                                <div style="margin-bottom: 12px; padding: 8px; background: var(--dark-800); border-radius: 6px;">
                                    <div style="font-weight: 500; color: var(--light-100);">Data Processing Pipeline</div>
                                    <div style="font-size: 11px; color: var(--light-400);">Runs every 6 hours</div>
                                </div>
                                <div style="margin-bottom: 12px; padding: 8px; background: var(--dark-800); border-radius: 6px;">
                                    <div style="font-weight: 500; color: var(--light-100);">Model Training Scheduler</div>
                                    <div style="font-size: 11px; color: var(--light-400);">Triggered by data updates</div>
                                </div>
                                <div style="padding: 8px; background: var(--dark-800); border-radius: 6px;">
                                    <div style="font-weight: 500; color: var(--light-100);">Report Generator</div>
                                    <div style="font-size: 11px; color: var(--light-400);">Daily at 9:00 AM</div>
                                </div>
                            </div>
                            <div class="vm-actions">
                                <button class="vm-action" onclick="projectsManager.createWorkflow('${project.id}')">
                                    <i class="fas fa-plus"></i>
                                    Create
                                </button>
                                <button class="vm-action" onclick="projectsManager.manageWorkflows('${project.id}')">
                                    <i class="fas fa-cog"></i>
                                    Manage
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }

            switchTab(tabName) {
                // Update tab appearance
                document.querySelectorAll('.workspace-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

                // Update content visibility
                document.querySelectorAll('.workspace-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.getElementById(tabName).classList.add('active');

                this.currentTab = tabName;
                this.logActivity(`Switched to ${tabName} tab`, 'info');
            }

            populateIntelligenceInsights() {
                const container = document.getElementById('intelligence-insights');
                const insights = [
                    {
                        type: 'optimization',
                        confidence: 92,
                        text: 'VM resources are underutilized. Consider scaling down to reduce costs while maintaining performance.'
                    },
                    {
                        type: 'collaboration',
                        confidence: 87,
                        text: 'High collaboration activity detected. Enable real-time synchronization for better team coordination.'
                    },
                    {
                        type: 'automation',
                        confidence: 94,
                        text: 'Repetitive data processing tasks identified. Automation workflow recommended for 40% efficiency gain.'
                    }
                ];

                container.innerHTML = insights.map(insight => `
                    <div class="insight-card">
                        <div class="insight-header">
                            <div class="insight-type">${insight.type}</div>
                            <div class="insight-confidence">${insight.confidence}%</div>
                        </div>
                        <div class="insight-text">${insight.text}</div>
                    </div>
                `).join('');
            }

            populateCollaborators() {
                const container = document.getElementById('collaborator-list');
                const collaborators = [
                    { name: 'Research Assistant', role: 'AI Agent', avatar: 'AI', status: 'online' },
                    { name: 'Dr. Sarah Chen', role: 'Lead Researcher', avatar: 'SC', status: 'online' },
                    { name: 'Mike Kumar', role: 'Data Scientist', avatar: 'MK', status: 'online' },
                    { name: 'Analysis Bot', role: 'AI Agent', avatar: 'AB', status: 'busy' }
                ];

                container.innerHTML = collaborators.map(collaborator => `
                    <div class="collaborator-item">
                        <div class="collaborator-avatar">${collaborator.avatar}</div>
                        <div class="collaborator-info">
                            <div class="collaborator-name">${collaborator.name}</div>
                            <div class="collaborator-role">${collaborator.role}</div>
                        </div>
                        <div class="collaborator-status"></div>
                    </div>
                `).join('');
            }

            populateActivityFeed() {
                const container = document.getElementById('activity-feed');
                const activities = [
                    { type: 'vm', text: 'VM resources scaled up for increased workload', time: '2 min ago' },
                    { type: 'collaboration', text: 'Dr. Sarah Chen joined the project workspace', time: '5 min ago' },
                    { type: 'intelligence', text: 'AI generated optimization recommendations', time: '8 min ago' },
                    { type: 'artifact', text: 'New visualization artifact created', time: '12 min ago' },
                    { type: 'vm', text: 'Automated backup completed successfully', time: '15 min ago' }
                ];

                container.innerHTML = activities.map(activity => `
                    <div class="activity-item">
                        <div class="activity-icon ${activity.type}">
                            <i class="fas fa-${this.getActivityIcon(activity.type)}"></i>
                        </div>
                        <div class="activity-content">
                            <div class="activity-text">${activity.text}</div>
                            <div class="activity-time">${activity.time}</div>
                        </div>
                    </div>
                `).join('');
            }

            getActivityIcon(type) {
                const icons = {
                    vm: 'server',
                    collaboration: 'users',
                    intelligence: 'brain',
                    artifact: 'code'
                };
                return icons[type] || 'info';
            }

            // Modal functions
            showCreateProjectModal() {
                document.getElementById('create-project-modal').classList.add('active');
            }

            hideCreateProjectModal() {
                document.getElementById('create-project-modal').classList.remove('active');
                document.getElementById('create-project-form').reset();
            }

            createProject() {
                const formData = new FormData(document.getElementById('create-project-form'));
                const projectData = {
                    name: formData.get('project-name') || document.getElementById('project-name').value,
                    description: document.getElementById('project-description').value,
                    type: document.getElementById('project-type').value,
                    vmConfig: document.getElementById('vm-config').value,
                    enableCollaboration: document.getElementById('enable-collaboration').checked,
                    enableAutomation: document.getElementById('enable-automation').checked
                };

                this.logActivity(`Creating project: ${projectData.name}`, 'info');

                this.sendMessage({
                    type: 'create_project',
                    project: projectData
                });

                this.hideCreateProjectModal();
            }

            // Project actions
            openProject(projectId) {
                this.logActivity(`Opening project: ${projectId}`, 'info');
                this.selectProject(projectId);
                // In a real implementation, this would open the project in the main interface
            }

            manageVM(projectId) {
                this.logActivity(`Managing VM for project: ${projectId}`, 'info');
                this.selectProject(projectId);
                this.switchTab('vm-dashboard');
            }

            shareProject(projectId) {
                this.logActivity(`Sharing project: ${projectId}`, 'info');
                // Implementation for sharing project
            }

            connectToVM(projectId) {
                this.logActivity(`Connecting to VM for project: ${projectId}`, 'info');
                this.sendMessage({
                    type: 'connect_vm',
                    projectId: projectId
                });
            }

            suspendVM(projectId) {
                this.logActivity(`Suspending VM for project: ${projectId}`, 'warning');
                this.sendMessage({
                    type: 'suspend_vm',
                    projectId: projectId
                });
            }

            restartVM(projectId) {
                this.logActivity(`Restarting VM for project: ${projectId}`, 'info');
                this.sendMessage({
                    type: 'restart_vm',
                    projectId: projectId
                });
            }

            // Intelligence actions
            analyzeProject() {
                if (!this.selectedProject) return;
                this.logActivity('Starting AI project analysis...', 'info');
                this.sendMessage({
                    type: 'analyze_project',
                    projectId: this.selectedProject
                });
            }

            optimizeWorkflow() {
                if (!this.selectedProject) return;
                this.logActivity('Optimizing project workflow...', 'info');
                this.sendMessage({
                    type: 'optimize_workflow',
                    projectId: this.selectedProject
                });
            }

            generateSuggestions() {
                if (!this.selectedProject) return;
                this.logActivity('Generating AI suggestions...', 'info');
                this.sendMessage({
                    type: 'generate_suggestions',
                    projectId: this.selectedProject
                });
            }

            // Filter and search functions
            filterProjects(type) {
                const cards = document.querySelectorAll('.project-card');
                cards.forEach(card => {
                    if (type === 'all' || card.dataset.type === type) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            searchProjects(query) {
                const cards = document.querySelectorAll('.project-card');
                cards.forEach(card => {
                    const name = card.querySelector('.project-name').textContent.toLowerCase();
                    const description = card.querySelector('.project-description').textContent.toLowerCase();
                    
                    if (name.includes(query.toLowerCase()) || description.includes(query.toLowerCase())) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            syncProjects() {
                this.logActivity('Syncing projects with backend...', 'info');
                this.sendMessage({
                    type: 'sync_projects'
                });
            }

            showProjectSettings() {
                if (!this.selectedProject) return;
                this.logActivity('Opening project settings...', 'info');
                // Implementation for project settings
            }

            startMonitoring() {
                // Update charts every 5 seconds
                setInterval(() => {
                    this.updateMonitoringCharts();
                }, 5000);
            }

            updateMonitoringCharts() {
                if (this.monitoringCharts.resource) {
                    // Update resource chart with new data
                    this.monitoringCharts.resource.data.datasets[0].data = [
                        Math.random() * 100,
                        Math.random() * 100,
                        Math.random() * 100
                    ];
                    this.monitoringCharts.resource.update('none');
                }

                if (this.monitoringCharts.activity) {
                    // Update activity chart with new data
                    const newData = Array.from({ length: 6 }, () => Math.floor(Math.random() * 30));
                    this.monitoringCharts.activity.data.datasets[0].data = newData;
                    this.monitoringCharts.activity.update('none');
                }
            }

            logActivity(message, type = 'info') {
                console.log(`[Projects] ${message}`);
                
                // Add to activity feed
                const feed = document.getElementById('activity-feed');
                const activity = document.createElement('div');
                activity.className = 'activity-item';
                activity.innerHTML = `
                    <div class="activity-icon ${type === 'info' ? 'vm' : type}">
                        <i class="fas fa-${type === 'info' ? 'info' : type === 'warning' ? 'exclamation-triangle' : 'check'}"></i>
                    </div>
                    <div class="activity-content">
                        <div class="activity-text">${message}</div>
                        <div class="activity-time">Just now</div>
                    </div>
                `;
                
                feed.insertBefore(activity, feed.firstChild);
                
                // Keep only last 10 activities
                while (feed.children.length > 10) {
                    feed.removeChild(feed.lastChild);
                }
            }

            // WebSocket message handlers
            addProject(project) {
                this.projects.set(project.id, project);
                this.renderProjects();
                this.logActivity(`Project created: ${project.name}`, 'success');
            }

            updateProject(project) {
                this.projects.set(project.id, project);
                this.renderProjects();
                if (this.selectedProject === project.id) {
                    this.updateWorkspaceContent(project);
                }
                this.logActivity(`Project updated: ${project.name}`, 'info');
            }

            updateVMStatus(projectId, vmStatus) {
                const project = this.projects.get(projectId);
                if (project) {
                    project.vmStatus = vmStatus;
                    if (this.selectedProject === projectId) {
                        this.renderVMDashboard(project);
                    }
                }
            }

            updateCollaboration(projectId, collaboration) {
                const project = this.projects.get(projectId);
                if (project) {
                    project.collaboration = collaboration;
                    if (this.selectedProject === projectId) {
                        this.renderCollaboration(project);
                    }
                }
            }

            addIntelligenceInsight(insight) {
                // Add new insight to the intelligence panel
                const container = document.getElementById('intelligence-insights');
                const insightElement = document.createElement('div');
                insightElement.className = 'insight-card fade-in';
                insightElement.innerHTML = `
                    <div class="insight-header">
                        <div class="insight-type">${insight.type}</div>
                        <div class="insight-confidence">${insight.confidence}%</div>
                    </div>
                    <div class="insight-text">${insight.text}</div>
                `;
                container.insertBefore(insightElement, container.firstChild);
                
                this.logActivity(`New AI insight: ${insight.type}`, 'intelligence');
            }

            addActivity(activity) {
                this.logActivity(activity.message, activity.type);
            }
        }

        // Initialize the Projects Manager
        document.addEventListener('DOMContentLoaded', () => {
            window.projectsManager = new RevolutionaryProjectsManager();
        });
    </script>
</body>
</html>